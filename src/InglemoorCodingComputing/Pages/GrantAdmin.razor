@page "/grant-admin"
@inject IUserAuthService UserAuthService

<PageTitle>Grant Admin</PageTitle>

<div class="flex justify-center pt-4">
    <div class="flex flex-col text-center justify-center">
        @if (verified)
        {
            <div class="flex justify-center space-x-2">
                <input @bind-value="entry" class="dark:bg-slate-700 border-2 border-indigo-500 rounded-lg px-3 text-slate-900 dark:text-white focus:outline-none" placeholder="email"/>
                <button class="font-semibold text-white py-2 px-4 bg-indigo-500 rounded-lg text-md hover:bg-indigo-400" @onclick="Add">Grant Admin</button>
            </div>
            @if (error is not null)
            {
                <p class="text-rose-500">@error</p>
            }
            @if (_admins is null)
            {
                <div class="justify-self-center flex justify-center pt-5">
                    <svg class="animate-spin h-5 w-5 text-indigo-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </div>
            }
            else
            {
                <div class="pt-5">
                    @if (_admins.Count is 0)
                    {
                        <div class="max-2-sm rounded-md">
                                <p class="italic font-semibold self-center text-sky-500 dark:text-sky-300">No admins added.</p>
                        </div>
                    }
                    @foreach (var admin in _admins)
                    {
                        <div class="max-2-sm rounded-md overflow-hidden shadow-md dark:bg-gray-800 mb-3">
                            <div class="px-6 py-2 flex space-x-4">
                                <p class="font-bold self-center text-amber-500 dark:text-amber-300">@admin.Email (@admin.Id)</p>
                                <button class="text-rose-500 hover:bg-gray-200 dark:hover:bg-rose-500 dark:hover:text-gray-800 p-2 rounded-md" @onclick="@(async () => await RemoveAsync(admin.Email))">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M11 6a3 3 0 11-6 0 3 3 0 016 0zM14 17a6 6 0 00-12 0h12zM13 8a1 1 0 100 2h4a1 1 0 100-2h-4z" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="relative">
                <input @bind-value="key" type="@(viewKey ? "text" : "password")" class="font-mono border-2 border-indigo-500 rounded-lg p-2 text-slate-900 dark:text-white dark:bg-slate-700 focus:outline-none" placeholder="admin key"/>
                <button @onclick="@(() => {viewKey = !viewKey; StateHasChanged(); })" class="absolute inset-y-0 right-0 pr-3 flex items-center leading-5">
                    @if(viewKey)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd" />
                            <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                        </svg>
                    }
                </button>                
            </div>
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5"> </div>
            <button class="p-2 bg-indigo-500 hover:bg-indigo-400 rounded-md text-white p-2 mt-2" @onclick="Verify">Verify</button>
        }
    </div>
</div>



@code { 
    private bool viewKey;
    private string? error;
    private bool verified;
    private string key = string.Empty;
    private string entry = string.Empty;
    private List<UserAuth>? _admins;

    private async Task Add()
    {
        var sid = entry;
        entry = string.Empty;
        await InvokeAsync(StateHasChanged);
        error = null;
        if (!await UserAuthService.GrantAdminAsync(sid, key))
            error = "Could not grant admin";
        _ = UpdateAdminsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveAsync(string sId)
    {
        error = null;
        if (!await UserAuthService.RevokeAdminAsync(sId, key))
            error = "Could not revoke admin";
        _ = UpdateAdminsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Verify()
    {
        verified = UserAuthService.AdminKeyValid(key);
        if (verified)
            _ = UpdateAdminsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateAdminsAsync()
    {
        _admins = null;
        List<UserAuth> temp = new();
        await foreach (var admin in UserAuthService.GetAdmins())
            temp.Add(admin);
        temp.Sort((x, y) => x.Email.CompareTo(y.Email));
        _admins = temp;
        await InvokeAsync(StateHasChanged);
    }
}
