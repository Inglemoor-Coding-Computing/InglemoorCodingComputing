@page "/authentication/reset-password"
@inject IUserAuthService UserAuthService
@inject IEmailService EmailService
@using System.Security.Cryptography

<div class="flex items-start justify-center min-h-full px-4 py-12 sm:px-6 lg:px-8">
    <div class="max-w-md space-y-3 dark:bg-zinc-900">
        <div class="px-6 pt-4 border-2 border-indigo-400 rounded-lg shadow shadow-indigo-500/50">
            <img class="w-auto h-20 pt-3 mx-auto" src="/logo.webp" />
            <h2 class="my-6 text-2xl font-semibold text-center dark:text-slate-200 text-slate-900">Reset Password</h2>
            @if (success)
            {
                <h4 class="text-xl dark:text-slate-200 text-slate-900">Your password has been reset</h4>
                <div class="flex justify-center py-6">
                    <a href=@($"/authentication/login{(ReturnUrl is null ? "" : "?returnUrl=" + Uri.EscapeDataString(ReturnUrl))}") class="text-indigo-500 hover:underline">Sign in</a>
                </div>
            }
            else if (verified)
            {
                <EditForm Model=@request2 OnValidSubmit=@ChangeAsync class="flex flex-col px-8 pb-8 space-y-2">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div>
				        <label for="password" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">New Password</label>
				        <InputText type="password" @bind-Value=request2.Password id="password" class="font-mono focus:outline-none bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" placeholder="********"/>
                    </div>
                    <div class="flex justify-center">
                        <button type="submit" class="px-6 py-2 mt-2 mr-2 font-medium text-center text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:shadow-md hover:shadow-indigo-500/50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 rounded-xl">Change Password</button>
                    </div>
                </EditForm>
            }
            else if (token is null)
            {
                <EditForm Model=@request OnValidSubmit=@SubmitAsync class="flex flex-col px-8 pb-8 space-y-2">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div>
				        <label for="email" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">Email</label>
				        <InputText type="text" @bind-Value=request.Email id="email" class="focus:outline-none bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"/>
                    </div>
                    <div class="flex justify-center">
                        <button type="submit" class="px-6 py-2 mt-2 mr-2 font-medium text-center text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:shadow-md hover:shadow-indigo-500/50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 rounded-xl">Next</button>
                    </div>
                </EditForm>
            }
            else
            {
                <div class="flex flex-col px-8 pb-8 space-y-2">
	                <label for="token" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">Code sent to @request.Email (expires after 5 minutes)'</label>
                    <input @bind=inputToken id="token" class="text-center focus:outline-none x-3 bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" placeholder="code"/>
                    <button @onclick=Verify class="px-6 py-2 mt-2 mr-2 font-medium text-center text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:shadow-md hover:shadow-indigo-500/50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 rounded-xl">Verify</button>
                    <span class="text-rose-500">@error</span>
                    <div class="flex justify-end">
                        <button class="p-1 text-sm text-indigo-500 hover:underline w-fit" @onclick=Reset>Start over</button>
                    </div>
                </div>
            }
        </div>    
    </div>
</div>

@code {
    private PasswordResetRequest request = new();
    private PasswordResetConfirmationRequest request2 = new();

    private DateTime expires;
    private string? token;
    private string? inputToken;
    private string? error;
    private bool verified;
    private bool success;
    private UserAuth? user;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private async Task SubmitAsync()
    {
        token = RandomNumberGenerator.GetInt32(100000, 1000000).ToString();
        _ = Task.Run(async () =>
        {
            try
            {
                if (await UserAuthService.UserWithEmail(request.Email.Trim()) is UserAuth userAuth)
                {
                    user = userAuth;
                    expires = DateTime.UtcNow.AddMinutes(5);
                    {
                        try
                        {
                            EmailService.Send(request.Email.Trim(), "Inglemoor Coding & Computing Club Password Reset", $"Hi\nYour verifcation code is \"{token}\".\nThank You");
                        }
                        catch { }
                    }
                }
            }
            catch
            {
            // TODO: log it
            }
        });
        await InvokeAsync(StateHasChanged);
    }

    private void Verify()
    {
        try
        {
            error = null;
            if (token != inputToken)
                error = "Invalid code.";
            else if (DateTime.UtcNow >= expires || user is null)
                error = "Expired code.";
            else
                verified = true;
        }
        catch
        {
            error = "Invalid code."; 
        }
    }

    private async Task ChangeAsync()
    {
        try
        {
            await UserAuthService.ChangePasswordAsync(user!, request2.Password);
            success = true;
        }
        catch
        {
            // TODO: log it

            error = "Unknown error";
        }
    }

    private void Reset()
    {
        user = null;
        token = null;
        error = null;
    }
}
