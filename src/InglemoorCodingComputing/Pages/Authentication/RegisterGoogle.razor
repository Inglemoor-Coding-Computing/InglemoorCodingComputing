@page "/authentication/register-google"
@inject IUserStateService UserStateService
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Finish Registering</PageTitle>

<div class="flex items-start justify-center min-h-full px-4 py-12 sm:px-6 lg:px-8">
    <div class="max-w-md space-y-3 dark:bg-zinc-900">
        <div class="px-6 pt-4 border-2 border-indigo-400 rounded-lg shadow shadow-indigo-500/50">
            <img class="w-auto h-20 pt-3 mx-auto" src="/logo.webp" />
            <h2 class="mt-6 text-2xl font-semibold text-center dark:text-slate-200 text-slate-900">Finish setting up your account</h2>
            <EditForm Model=@request OnValidSubmit=@SubmitAsync class="flex flex-col px-8 pb-8 space-y-2">
                <div class="text-rose-500">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    @error
                </div>

                <div class="flex space-x-2">
                    <div>
				        <label for="firstName" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">First Name</label>
				        <InputText @bind-Value=request.FirstName id="firstname" class="focus:outline-none bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"/>
                    </div>
                    <div>
				        <label for="lastName" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">Last Name</label>
				        <InputText @bind-Value=request.LastName id="lastname" class="focus:outline-none bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"/>
                    </div>
                </div>
                <div>
				    <label for="gradeLevel" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">Grade</label>
				    <InputNumber type="text" @bind-Value=request.Grade id="gradelevel" class="focus:outline-none bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" placeholder="9"/>
                </div>
                <div class="flex justify-center">
                    <button type="submit" class="px-6 py-2 mt-2 mr-2 font-medium text-center text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:shadow-md hover:shadow-indigo-500/50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 rounded-xl">Finish</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter, SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private AccountFinalization request = new();
    private AppUser? user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            user = await UserStateService.CurrentAsync();
            if (user?.RegistrationIncomplete is not true)
                NavigationManager.NavigateTo("");
            else if (user is not null)
            {
                request = new()
                {
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    Grade = 0
                };
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private string? error;

    private async Task SubmitAsync()
    {
        try
        {
            await UserService.TryUpdateUserAsync(user! with
                {
                    FirstName = request.FirstName,
                    LastName = request.LastName,
                    GraduationYear = AppUser.GraduationYearToGradeLevel(request.Grade)
                    
                });
            UserStateService.Update();
            NavigationManager.NavigateTo(ReturnUrl ?? "");
        }
        catch
        {
            error = "Unknown error";
        }
    }
}
