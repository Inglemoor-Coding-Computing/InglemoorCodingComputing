@page "/authentication/login"
@inject IUserAuthService UserAuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Text.Json

<PageTitle>Login</PageTitle>

<div class="flex items-start justify-center min-h-full px-4 py-12 sm:px-6 lg:px-8">
    <div class="max-w-md space-y-3 dark:bg-zinc-900">
        <div class="px-6 pt-4 border-2 border-indigo-400 rounded-lg shadow shadow-indigo-500/50">
            <img class="w-auto h-20 pt-3 mx-auto" src="/logo.webp" />
            <h2 class="mt-6 text-2xl font-semibold text-center dark:text-slate-200 text-slate-900">Sign in to your account</h2>
            <p class="m-2 text-center text-md dark:text-slate-200 text-slate-900">
                or 
                <a class="font-medium text-indigo-500 hover:text-indigo-400" href="/authentication/register">register now</a>
            </p>
            <div class="py-2">
                <a href="@($"/api/auth/login-google{(ReturnUrl is null ? "" : "?returnUrl=" + Uri.EscapeDataString(ReturnUrl))}")" class="flex h-12 mx-auto bg-white border rounded-full w-52 dark:text-gray-200 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 dark:border-gray-900">
                    <img class="p-2" src="/png/google-logo.png"/>
                    <p class="flex items-center text-slate-900 dark:text-slate-200">Sign in with Google</p>
                </a>
            </div>

            <p class="m-4 text-lg font-semibold text-center dark:text-slate-200 text-slate-900">Sign in with email</p>

            <EditForm Model=@request OnValidSubmit=@SubmitAsync class="flex flex-col px-6 pb-4 space-y-2">
                <div class="text-rose-500">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                </div>
                <div>
				    <label for="email" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">Email</label>
				    <InputText type="text" @bind-Value=request.Email id="email" class="focus:outline-none bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"/>
                </div>
                <div>
				    <label for="password" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">Password</label>
				    <InputText type="password" @bind-Value=request.Password id="password" class="font-mono focus:outline-none bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" placeholder="********"/>
                </div>
                <div class="flex items-center block mb-1 space-x-2 text-sm font-medium text-slate-900 dark:text-gray-300">
                    <label for="rememberme" class="">Stay Logged In: </label>
                    <InputCheckbox class="" @bind-Value=request.RememberMe id="rememberme" />
                </div>
                <div class="flex justify-center">
                    <button type="submit" class="px-6 py-2 mt-2 mr-2 font-medium text-center text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:shadow-md hover:shadow-indigo-500/50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 rounded-xl">Log in</button>
                </div>
                <span class="text-rose-500">@error</span>
            </EditForm>

            <hr class="dark:border-gray-600"/>
            <div class="flex justify-center py-5">
                <a href=@($"/authentication/reset-password{(ReturnUrl is null ? "" : "?returnUrl=" + Uri.EscapeDataString(ReturnUrl))}") class="font-semibold text-indigo-500 text-md hover:underline">Reset your password</a>
            </div>

        </div>    
    </div>
</div>

@code {
    private LoginRequest request = new();

    private string? error;

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string? ReturnUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && (await AuthState).User.Identity?.IsAuthenticated is true)
        {
            // Logout.
            await JSRuntime.InvokeAsync<int>("post", new[] { "/api/auth/logout", "" });
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }

    private async Task SubmitAsync()
    {
        error = null;
        var res = await JSRuntime.InvokeAsync<int>("post", new[] { "/api/auth/login", JsonSerializer.Serialize(request) });

        if (res == 200)
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "", true);
        }
        else
            error = "Bad Credentials.";
    }

    private async Task LoginGoogleAsync()
    {
        await JSRuntime.InvokeAsync<int>("post", new[] { $"/api/auth/login-google{(ReturnUrl is null ? "" : "?returnUrl=" + Uri.EscapeDataString(ReturnUrl))}", "" });
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}