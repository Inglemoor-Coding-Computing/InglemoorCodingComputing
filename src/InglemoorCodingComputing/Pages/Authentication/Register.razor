@page "/authentication/register"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IUserAuthService UserAuthService
@inject IUserService UserService
@inject IApprovedEmailsService ApprovedEmailsService
@inject IEmailService EmailService
@inject ILogger<Register> Logger
@using System.Security.Cryptography
@using System.Text.Json

<PageTitle>Register</PageTitle>

<div class="flex items-start justify-center min-h-full px-4 py-12 sm:px-6 lg:px-8">
    <div class="max-w-md space-y-3 dark:bg-zinc-900">
        <div class="px-6 pt-4 border-2 border-indigo-400 rounded-lg shadow shadow-indigo-500/50">
            <img class="w-auto h-20 pt-3 mx-auto" src="/logo.webp" />
            @if (token is null)
            {
                <h2 class="mt-6 text-2xl font-semibold text-center dark:text-slate-200 text-slate-900">Sign up</h2>
                <p class="m-2 text-center text-md dark:text-slate-200 text-slate-900">
                    or 
                    <a class="font-medium text-indigo-500 hover:text-indigo-400" href="/authentication/register">sign in to your account</a>
                </p>

                <div class="py-2">
                    <a href="/api/auth/login-google" class="flex w-56 h-12 mx-auto bg-white border rounded-full dark:text-gray-200 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 dark:border-gray-900">
                        <img width="47" height="47" class="p-2 aspect-square" src="/png/google-logo.png?width=100" />
                        <p class="flex items-center text-slate-900 dark:text-slate-200">Continue with Google</p>
                    </a>
                </div>

                <p class="m-4 text-lg font-semibold text-center dark:text-slate-200 text-slate-900">Register with email</p>

                <EditForm Model=@request OnValidSubmit=@SubmitAsync class="flex flex-col px-8 pb-8 space-y-2">
                    <div class="flex space-x-2">
                        <div>
				            <label for="firstName" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">First Name</label>
				            <InputText @bind-Value=request.FirstName id="firstname" class="focus:outline-none bg-gray-100 text-gray-900 sm:text-sm rounded-xl focus:ring-indigo-500 focus:border-indigo-500 block w-full px-4 py-3 dark:bg-gray-600 dark:placeholder-gray-400 dark:text-white"/>
                        </div>
                        <div>
				            <label for="lastName" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">Last Name</label>
				            <InputText @bind-Value=request.LastName id="lastname" class="focus:outline-none bg-gray-100 text-gray-900 sm:text-sm rounded-xl focus:ring-indigo-500 block w-full px-4 py-3 dark:bg-gray-600 dark:placeholder-gray-400 dark:text-white"/>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <div>
				            <label for="gradeLevel" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">Grade</label>
				            <InputNumber type="text" @bind-Value=request.GradeLevel id="gradelevel" class="focus:outline-none bg-gray-100 text-gray-900 sm:text-sm rounded-xl focus:ring-indigo-500 block w-full px-4 py-3 dark:bg-gray-600 dark:placeholder-gray-400 dark:text-white" placeholder="9"/>
                        </div>
                        <div>
				            <label for="email" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">Email</label>
				            <InputText @bind-Value=request.Email id="email" class="focus:outline-none bg-gray-100 text-gray-900 sm:text-sm rounded-xl focus:ring-indigo-500 block w-full px-4 py-3 dark:bg-gray-600 dark:placeholder-gray-400 dark:text-white" />
                        </div>
                    </div>
                    <div>
				        <label for="password" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">Password</label>
				        <div class="relative">
                            <InputText type="@(viewPassword ? "text" : "password")" @bind-Value=request.Password id="password" class="font-mono focus:outline-none bg-gray-100 text-gray-900 sm:text-sm rounded-xl focus:ring-indigo-500 focus:border-indigo-500 block w-full px-4 py-3 dark:bg-gray-600 dark:placeholder-gray-400 dark:text-white"/>
                            <button type="button" @onclick="@(() => {viewPassword = !viewPassword; })" class="absolute inset-y-0 right-0 flex items-center pr-3 leading-5 text-indigo-500">
                                @if(viewPassword)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                                        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd" />
                                        <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                                    </svg>
                                }
                            </button> 
                        </div>
                    </div>
                    <div class="flex justify-center">
                        @if (disabled)
                        {
                            <button disabled type="submit" class="px-6 py-2 mt-2 mr-2 font-medium text-center text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:shadow-md hover:shadow-indigo-500/50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 rounded-xl">Register</button>
                        }
                        else
                        {
                            <button type="submit" class="px-6 py-2 mt-2 mr-2 font-medium text-center text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:shadow-md hover:shadow-indigo-500/50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 rounded-xl">Register</button>
                        }
                    </div>
                    <div class="text-rose-500">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        @error
                    </div>
                </EditForm>
            }
            else
            {
                <div class="flex flex-col px-8 pb-8 space-y-2">
	                <label for="token" class="block mb-1 text-sm font-medium text-slate-900 dark:text-gray-300">Code sent to @request.Email</label>
                    <input @bind=inputToken id="token" class="focus:outline-none x-3 bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" placeholder="code"/>
                    <button @onclick=Create class="px-6 py-2 mt-2 mr-2 font-medium text-center text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:shadow-md hover:shadow-indigo-500/50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 rounded-xl">Create Account</button>
                    @if (error is not null)
                    {
                        <span class="text-rose-500">@error</span>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string? token;
    private string? inputToken;
    private string? error;

    private bool disabled;

    private bool viewPassword;

    private RegisterRequest request = new();

    private async Task SubmitAsync()
    {
        disabled = true;
        error = null;
        if (await UserAuthService.UserWithEmail(request.Email.Trim()) is not null)
            error = "Email in use.";
        else if (!await ApprovedEmailsService.EmailApprovedAsync(request.Email.Trim()))
            error = "Email not valid";
        else
        {
            token = RandomNumberGenerator.GetInt32(100000, 1000000).ToString();
            try
            {
                EmailService.Send(request.Email.Trim(), "Confirm email for Inglemoor Coding & Computing Club", $"Hi {request.FirstName},\nYour verifcation code is \"{token}\".\nThank You");
            }
            catch
            {
                Logger.LogError($"User registration confirmation email for '{request.Email.Trim()}' failed to send");
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task Create()
    {
        if (inputToken == token && await UserAuthService.AddUserAsync(request.Email.Trim(), request.Password) is UserAuth userAuth)
        {
            // Create user
            if (!await UserService.TryCreateUserAsync(new()
            {
                Id = userAuth.Id,
                Email = request.Email.Trim(),
                FirstName = request.FirstName,
                LastName = request.LastName,
                GraduationYear = AppUser.GradeLevelToGraduationYear(request.GradeLevel),
                CreatedDate = DateTime.UtcNow,
            }))
            {
                error = "Invalid Code";
                return;
            }

            Logger.LogInformation($"User '{request.FirstName} {request.LastName}' ({userAuth.Id}) registered.");

            // in theory we could use the same registration request as a login request but that might cause issues down the line.
            LoginRequest login = new() 
            { 
                Email = request.Email, 
                Password = request.Password 
            };
            _ = await JSRuntime.InvokeAsync<int>("post", new[] { "/api/auth/login", JsonSerializer.Serialize(login) });

            NavigationManager.NavigateTo(NavigationManager.BaseUri, true);
        }
        else
            error = "Invalid Code";
    }
}