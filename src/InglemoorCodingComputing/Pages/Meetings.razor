@page "/meetings"
@inject IMeetingsService MeetingsService
@inject TimeZoneService TimeZoneService
@implements IDisposable

<PageTitle>Meetings</PageTitle>

<StaticEmbed Tag="_meetings"/>

<div class="flex flex-col items-center">
    @if (next is not null)
    {
        <span class="pt-5 text-slate-900 dark:text-white font-bold text-2xl text-center">Next Meeting:</span>
        <MeetingView Meeting=@next Editable=false Attendance=@attendance OnAttendance="user => { MeetingsService.TakeAttendanceAsync(next.Id, user); return RefreshAsync(); }"/>
    }

    <span class="pt-5 text-slate-900 dark:text-white font-bold text-2xl text-center">All Meetings:</span>
    @if (meetings is null)
    {
        <div class="flex justify-center pt-5 justify-self-center">
            <svg class="w-5 h-5 text-indigo-500 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
        </div>
    }
    else
    {
        <div class="space-y-2 flex flex-col items-center">
            <Virtualize Items=@meetings Context="meeting">
                <MeetingView @key=meeting.Id Meeting=meeting Editable=false/>
            </Virtualize>
        </div>
    }
</div>

@code {
    private Meeting? next;

    private bool attendance;

    private List<Meeting>? meetings = new();

    private async Task RefreshAsync()
    {
        //var dt = (await TimeZoneService.GetLocalDateTime(DateTimeOffset.UtcNow)).LocalDateTime;
        var dt = TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.UtcNow, "Pacific Standard Time");
        meetings = await MeetingsService.GetMeetingsAsync(AppUser.AcademicYear).ToListAsync();
        meetings.Sort((x, y) => y.Date.CompareTo(x.Date));
        next = await MeetingsService.NextAsync(dt);
        attendance = next is not null && next.Date.ToDateTime(next.StartTime) <= dt;
    }

    private async void OnChanged(object? _, EventArgs __)
    {
        await RefreshAsync();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshAsync();
            MeetingsService.Changed += OnChanged;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose() =>
        MeetingsService.Changed -= OnChanged;
}
