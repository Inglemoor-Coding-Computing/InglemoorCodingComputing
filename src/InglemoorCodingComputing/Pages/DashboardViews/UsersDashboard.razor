@page "/dashboard/users/{id:guid?}"
@layout DashboardLayout
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IUserAuthService UserAuthService
@inject IGroupsService GroupsService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles="Admin")]
<AdminCheck/>

<PageTitle>Users</PageTitle>

<div class="p-3">
    <a href="/dashboard/users" class="text-3xl font-semibold dark:text-indigo-300">Users</a>
    <div class="text-rose-500"> 
        @error
    </div>
    @if (appUser.HasValue)
    {
        var (user, auth) = appUser.Value;
        <div class="mt-8 space-y-2">
            <div class="flex space-x-4 items-center">
                <h3 class="text-4xl font-semibold">
                    @user.FirstName 
                    @user.LastName             
                </h3>
                @if (auth.IsAdmin)
                {
                    <p class="bg-amber-400 w-fit px-2 py-1 rounded-full font-extrabold text-white text-base">admin</p>
                }
            </div>
            @if (user.StudentNumber.HasValue)
            {
                <h4>nsd-@user.StudentNumber.Value</h4>
            }
            <p class="font-mono">UUID: @user.Id</p>
            <p>Email: @user.Email</p>
            <p>Graduation Year: @user.GraduationYear</p>
            <p>Account Created: @user.CreatedDate UTC</p>

            <h5 class="text-2xl font-semibold">Groups</h5>
            <div class="my-2 space-y-2">
                <Virtualize Items="@(user.Groups.Select(x => ((groupsR.TryGetValue(x, out var v) ? v : "Group not found"), x)).ToList())">
                    <div class="flex space-x-2 bg-indigo-400 w-fit px-3 py-1 rounded-full font-bold text-sm text-white text-base">
                        @context.Item1
                        <button @onclick="() => RemoveGroup(context.Item2)" class="text-white hover:bg-rose-500 rounded-lg hover:text-white ml-1">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                                <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
                            </svg>
                        </button>
                    </div>
                </Virtualize>
            </div>
            <div class="mb-3 space-y-2">
                <input @bind=group class="text-sm py-2 px-3 rounded-2xl bg-gray-200 dark:bg-slate-700 dark:text-gray-200 text-slate-900 w-32 focus:outline-none"/>
                <button class="text-sm py-1 px-2 bg-indigo-500 text-white hover:bg-indigo-600 rounded-lg" @onclick=AddGroup>Add Group</button>
                <div class="text-rose-500">
                    @groupError
                </div>
            </div>

            <h5 class="text-2xl font-semibold">Authentication</h5>
            <p>Email: @auth.Email</p>
            @if (auth.GoogleId is not null)
            {
                <div class="my-2">
                    <p class="font-bold">Google Sign-in enabled</p>
                    <p class="font-mono">Google Id: @auth.GoogleId</p>
                </div>
            }
            @if (auth.Hash is not null)
            {
                <div class="my-2">
                    <p class="font-bold">Email/Password Sign-in enabled</p>
                </div>
            }
            <div class="text-rose-400 font-bold">
                @if (auth.IsAdmin)
                {
                    <p>Cannot delete admin accounts</p>    
                }
                else
                {
                    <button @onclick=DeleteAsync class="flex content-center ml-2 text-rose-500 hover:text-gray-100 dark:hover:text-bg-slate-900 hover:bg-rose-500 py-1 px-2 rounded-xl">
                    Delete User
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 13h6m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                    </button>
                }
            </div>
        </div>
    }
    else
    {
        <div class="flex flex-col space-y-3">
            @if (loading)
            {
                <p>Loading...</p>
            }
            else
            {
                <Virtualize Items="@users" >
                    <a href="/dashboard/users/@context.Id" class="flex justify-between px-3 py-2 m-2 bg-gray-100 hover:bg-gray-50 rounded-md dark:bg-slate-900 dark:hover:bg-slate-800">
                        <div>
                            <span class="font-semibold">
                                Name:
                            </span>
                            @context?.FirstName @context?.LastName
                    
                            @if (context?.StudentNumber is not null)
                            {
                                <span class="font-sm"> (nsd-@context?.StudentNumber)</span>
                            }
                        </div>

                        @context?.Id
                        <div>
                            <span class="font-semibold">
                                Email:
                            </span>
                            @context?.Email
                        </div>
                        <div>
                            <span class="font-semibold">Grade: </span>
                            @AppUser.GraduationYearToGradeLevel(context?.GraduationYear ?? 0)
                            (class of @context?.GraduationYear)
                        </div>

                        <div>
                            <span class="font-semibold">
                                Created:
                            </span>
                             @context?.CreatedDate
                        </div>

                        @if (context?.DeletedDate is not null)
                        {
                            <div>
                                <span class="font-semibold">
                                    Deleted:
                                </span>
                                @context.DeletedDate
                            </div>
                        }
                    </a>
                </Virtualize>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    private (AppUser, UserAuth)? appUser;
    private string? error;
    private bool loading = true;
    private List<AppUser> users = new();
    private string group = string.Empty;

    private async Task DeleteAsync()
    {
        var code = Random.Shared.Next(1000, 9000);
        if (await JSRuntime.InvokeAsync<string>("prompt", $"Enter {code} to confirm deletion.") != code.ToString())
            return;
        error = null;
        if (!appUser.HasValue || !Id.HasValue)
            return;

        loading = true;
        await InvokeAsync(StateHasChanged);
        if (!await UserAuthService.TryDeleteUserAsync(Id.Value))
            error = "Could not delete user auth entry";
        if (!await UserService.TryDeleteUserAsync(Id.Value))
            error = "Could not delete user";

        users = await UserService.ReadAllUsers().ToListAsync();

        loading = false;
        NavigationManager.NavigateTo("/dashboard/users");
        await InvokeAsync(StateHasChanged);
    }

    private string route = string.Empty;

    Dictionary<string, Guid> groups = new();
    Dictionary<Guid, string> groupsR = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || route != NavigationManager.Uri)
        {
            route = NavigationManager.Uri;
            users = await UserService.ReadAllUsers().Where(x => !x.DeletedDate.HasValue).ToListAsync();
            loading = false;
            appUser = null;
            if (Id.HasValue)
            {
                var user = await UserService.TryReadUserAsync(Id.Value);
                var auth = await UserAuthService.TryReadUserAsync(Id.Value);
                if (user is not null && auth is not null)
                    appUser = (user, auth);
            }
            await InvokeAsync(StateHasChanged);
            await foreach (var group in GroupsService.AllGroupsAsync())
            {
                groups[group.Name] = group.Id;
                groupsR[group.Id] = group.Name;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private string? groupError;
    private async Task AddGroup()
    {
        groupError = null;
        if (!appUser.HasValue)
            return;
        if (await GroupsService.TryReadGroup(group) is not Group g)
        {
            groupError = "Could not find group";
            return;
        }
        var user = appUser.Value.Item1;
        if (user.Groups.Contains(g.Id))
        {
            groupError = "User already has that group.";
            return;
        }

        group = string.Empty;
        var newGroups = user.Groups.Append(g.Id);
        if (await UserService.TryUpdateUserAsync(user with { Groups = newGroups.ToList() }))
        {
            var nuser = await UserService.TryReadUserAsync(user.Id);
            if (nuser is not null)
                appUser = (nuser, appUser.Value.Item2);
        }
    }

    private async Task RemoveGroup(Guid group)
    {
        if (!appUser.HasValue)
            return;
        var user = appUser.Value.Item1;
        var newGroups = user.Groups.Where(x => x != group);
        if (await UserService.TryUpdateUserAsync(user with { Groups = newGroups.ToList() }))
        {
            var nuser = await UserService.TryReadUserAsync(user.Id);
            if (nuser is not null)
                appUser = (nuser, appUser.Value.Item2);
        }
    }
}
