@page "/dashboard/users"
@layout DashboardLayout
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IUserAuthService UserAuthService
@attribute [Authorize(Roles="Admin")]
<AdminCheck/>

<PageTitle>Users</PageTitle>

<div class="p-3">
    <h3 class="text-3xl font-semibold dark:text-indigo-300">Users</h3>
    <div class="flex flex-col space-y-3">

        @if (loading)
        {
            <p>Loading...</p>
        }
        else
        {
            <Virtualize Items="@users" >
                <div class="flex justify-between px-3 py-2 m-2 bg-gray-100 rounded-md dark:bg-slate-900">
                    <div>
                        <span class="font-semibold">
                            Name:
                        </span>
                        @context?.FirstName @context?.LastName
                    
                        @if (context?.StudentNumber is not null)
                        {
                            <span class="font-sm"> (nsd-@context?.StudentNumber)</span>
                        }
                    </div>

                    @context?.Id
                    <div>
                        <span class="font-semibold">
                            Email:
                        </span>
                        @context?.Email
                    </div>
                    <div>
                        <span class="font-semibold">Grade: </span>
                        @AppUser.GraduationYearToGradeLevel(context?.GraduationYear ?? 0)
                        (class of @context?.GraduationYear)
                    </div>

                    <div>
                        <span class="font-semibold">
                            Created:
                        </span>
                         @context.CreatedDate
                    </div>

                    @if (context.DeletedDate is not null)
                    {
                        <div>
                            <span class="font-semibold">
                                Deleted:
                            </span>
                            @context.DeletedDate
                        </div>
                    }

                    <button @onclick="() => DeleteAsync(context.Id)" class="ml-2 text-rose-500 hover:text-gray-100 dark:hover:text-bg-slate-900 hover:bg-rose-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 13h6m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                    </button>
                </div>
            </Virtualize>
        }
    </div>
</div>

@code {
    private bool loading = true;
    private List<AppUser> users = new();

    private async Task DeleteAsync(Guid id)
    {
        loading = true;
        await InvokeAsync(StateHasChanged);
        await UserService.DeleteUser(id);
        users = await UserService.ReadAllUsers().ToListAsync();

        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            users = await UserService.ReadAllUsers().Where(x => !x.DeletedDate.HasValue).ToListAsync();
            loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
