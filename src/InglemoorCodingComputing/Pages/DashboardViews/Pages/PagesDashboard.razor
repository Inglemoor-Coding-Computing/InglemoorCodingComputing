@page "/dashboard/pages"
@layout DashboardLayout
@inject IStaticPageService StaticPageService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Ganss.XSS.HtmlSanitizer HtmlSanitizer
@implements IDisposable
@attribute [Authorize(Roles="Admin")]
@using System.Text.RegularExpressions
@using System.Web
@using Markdig
<AdminCheck/>

<PageTitle>Pages</PageTitle>

<div class="p-3">
    <h3 class="text-3xl font-semibold dark:text-indigo-300">Pages</h3>

    <div class="pt-3 pb-4 pl-2">
        @if(DisplayAll)
        {
            <Virtualize Items=pages>
                <div role="button" @onclick=@(() => NavigationManager.NavigateTo($"dashboard/pages/{context.Id}")) class="flex justify-between px-3 py-2 m-2 bg-gray-100 rounded-md hover:bg-gray-200 dark:bg-slate-900 dark:hover:bg-slate-800" @key=context.Id>
                    <a target="_blank" class=@($"font-mono font-bold {(context.Live ? "text-emerald-400 dark:text-emerald:600 hover:underline" : "text-rose-500")}") href=@($"page/{context.Path}")>/@context.Path</a>
                    <span>@context.Title</span>
                    <div class="flex space-x-6">
                        <button @onclick="() => StaticPageService.TrySetPublishStatusAsync(context.Path, !context.Live)" class="@($"text-white font-semibold px-2 rounded-xl {(context.Live ? "bg-emerald-500 hover:bg-emerald-600" : "bg-rose-500 hover:bg-rose-600")}")">
                            @(context.Live ? "Live" : "Not live")
                        </button>
                    </div>
                </div>
            </Virtualize>
        }
        else
        {
            <p class="py-3 text-gray-500">@(string.Join('/', current) + "/")</p>
            <div class="flex flex-wrap space-x-3 space-y-3 select-none">
                <div aria-hidden="true"></div>
                <div role="button" @onclick=@(() => NavigationManager.NavigateTo("dashboard/pages/create")) class="flex flex-col items-center w-32 h-32 p-2 font-semibold text-white bg-indigo-500 rounded-2xl hover:bg-indigo-600">
                    <div class="text-6xl font-extralight">
                        +
                    </div>
                    Add
                </div>
                @if (current.Count != 0)
                {
                    <div typeof="button" @onclick=NavigateBack class="flex flex-col items-center justify-center w-32 h-32 p-2 rounded-2xl bg-zinc-200 hover:bg-zinc-300 dark:bg-gray-800 dark:hover:bg-gray-700">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-10 h-10">
                            <path fill-rule="evenodd" d="M9.53 2.47a.75.75 0 010 1.06L4.81 8.25H15a6.75 6.75 0 010 13.5h-3a.75.75 0 010-1.5h3a5.25 5.25 0 100-10.5H4.81l4.72 4.72a.75.75 0 11-1.06 1.06l-6-6a.75.75 0 010-1.06l6-6a.75.75 0 011.06 0z" clip-rule="evenodd" />
                        </svg>
                        Back
                    </div>
                }
                @foreach (var dir in Directories)
                {
                    <div typeof="button" @onclick="() => NavigateForward(dir)" class="flex flex-col items-center justify-center w-32 h-32 p-2 rounded-2xl bg-zinc-200 hover:bg-zinc-300 dark:bg-gray-800 dark:hover:bg-gray-700">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-10 h-10">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 12.75V12A2.25 2.25 0 014.5 9.75h15A2.25 2.25 0 0121.75 12v.75m-8.69-6.44l-2.12-2.12a1.5 1.5 0 00-1.061-.44H4.5A2.25 2.25 0 002.25 6v12a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9a2.25 2.25 0 00-2.25-2.25h-5.379a1.5 1.5 0 01-1.06-.44z" />
                        </svg>
                        @(dir)
                    </div>
                }
                @foreach (var page in Files)
                {
                    <div typeof="button" @onclick="@(() => NavigationManager.NavigateTo($"dashboard/pages/{page.Id}"))" class="relative w-32 h-32 p-2 bg-gray-100 rounded-2xl hover:bg-gray-200 dark:bg-slate-900 dark:hover:bg-slate-800">
                        <div class="absolute relative pt-1 pl-1">
                            <span class="absolute animate-ping duration-[2000] inline-flex w-3 h-3 rounded-full opacity-75 @(page.Live ? "bg-emerald-400" : "bg-rose-400")"></span>
                            <span class="absolute inline-flex w-3 h-3 rounded-full opacity-75 @(page.Live ? "bg-emerald-400" : "bg-rose-400")"></span>
                        </div>
                        @if (page.Authorized)
                        {
                            <div class="absolute right-0 pr-1 @(page.AdminAuthorized ? "text-amber-500" : string.Empty)">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                                    <path fill-rule="evenodd" d="M10 1a4.5 4.5 0 00-4.5 4.5V9H5a2 2 0 00-2 2v6a2 2 0 002 2h10a2 2 0 002-2v-6a2 2 0 00-2-2h-.5V5.5A4.5 4.5 0 0010 1zm3 8V5.5a3 3 0 10-6 0V9h6z" clip-rule="evenodd" />
                                </svg>
                            </div>
                        }
                        <div class="flex flex-col items-center justify-center h-full">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-10 h-10">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
                            </svg>
                            <div class="font-code">
                                @(page.Path.Split('/').Last())
                            </div>
                            <div>
                                @(page.Title)
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "displayAll")]
    public bool DisplayAll { get; set; }

    private async void OnChanged()
    {
        await GetPagesAsync();
    }

    [Parameter]
    [SupplyParameterFromQuery(Name = "d")]
    public string Directory { get; set; } = string.Empty;

    private IReadOnlyList<string> current => (Directory?.Split(',')?.Where(x => !string.IsNullOrWhiteSpace(x)) ?? Array.Empty<string>()).ToList();

    private IEnumerable<string> Directories =>
        pages.Select(x => x.Path).Where(x => x.StartsWith(string.Join('/', current)) && x.Count(x => x == '/') == current.Count + 1).Select(x => x.Split('/')[^2]).Distinct();

    private IEnumerable<Models.StaticPage> Files =>
        pages.Where(x => x.Path.StartsWith(string.Join('/', current)) && x.Path.Count(x => x == '/') == current.Count);

    private void NavigateBack() =>
        NavigationManager.NavigateTo($"dashboard/pages?d={string.Join(',', current.SkipLast(1))}");

    private void NavigateForward(string dir) =>
        NavigationManager.NavigateTo($"dashboard/pages?d={string.Join(',', current.Append(dir))}");

    private async Task GetPagesAsync()
    {
        pages.Clear();
        await foreach(var page in StaticPageService.SearchAsync())
        {
            if (string.IsNullOrEmpty(page.Area))
            {
                pages.Add(page);
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    List<Models.StaticPage> pages = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("highlightSnippet");
        if (firstRender)
        {
            StaticPageService.Changed += OnChanged;
            await foreach(var page in StaticPageService.SearchAsync())
            {
                if (string.IsNullOrEmpty(page.Area))
                {
                    pages.Add(page);
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    public void Dispose() =>
        StaticPageService.Changed -= OnChanged;
}
