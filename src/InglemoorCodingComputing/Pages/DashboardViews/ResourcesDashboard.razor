@page "/dashboard/resources"
@layout DashboardLayout
@inject NavigationManager NavigationManager
@inject IStaticResourceService StaticResourceService
@attribute [Authorize(Roles="Admin")]
<AdminCheck/>

<PageTitle>Resources</PageTitle>

<div class="p-3">
    <h3 class="text-3xl font-semibold dark:text-indigo-300">Resources</h3>
    <div class="flex flex-col space-y-3">
        <h2 class="font-semibold text-sxl dark:text-indigo-300">Files</h2>

        @if (loading)
        {
            <p>Loading...</p>
        }
        else
        {
            <label for="name">File name:</label>
            <input id="name" @bind=name placeholder="@(file?.Name)" class="px-2 py-1 m-2 bg-gray-300 rounded-lg text-slate-700 dark:text-slate-300 dark:bg-slate-700 focus:outline-none"/>
            <InputFile OnChange=LoadFileAsync />
            <button @onclick=AddFileAsync class="p-2 m-1 text-white bg-indigo-500 rounded-lg">Add/Replace file</button>
            <div class="text-rose-500">
                @error
            </div>
            <Virtualize Items=@files>
                <div class="flex justify-between px-3 py-2 m-2 bg-gray-100 rounded-md dark:bg-slate-900">
                    <a target="_blank" href=@($"{NavigationManager.BaseUri}static/{context}") class="hover:underline">@context</a>
                    <button @onclick="() => DeleteAsync(context)" class="ml-2 text-rose-500 hover:text-gray-100 dark:hover:text-bg-slate-900 hover:bg-rose-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 13h6m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                    </button>
                </div>
            </Virtualize>
        }
    </div>
</div>

@code {
    private bool loading = true;
    private string? error;
    private string name = string.Empty;
    private IBrowserFile? file;
    List<string> files = new();

    private async Task DeleteAsync(string name)
    {
        loading = true;
        await InvokeAsync(StateHasChanged);
        await StaticResourceService.DeleteAsync(name);
        files = await StaticResourceService.GetFileNamesAsync().ToListAsync();

        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadFileAsync(InputFileChangeEventArgs e)
    {
        error = null;
        if (e.File.Size > 10_000_000)
        {
            file = null;
            error = "Max size: 10mb.";
            await InvokeAsync(StateHasChanged);
            return;
        }
        file = e.File;
    }

    private async Task AddFileAsync()
    {
        if (file is null)
            return;
        loading = true;
        await InvokeAsync(StateHasChanged);
        await StaticResourceService.UploadAsync(string.IsNullOrWhiteSpace(name) ? file.Name : name, file.OpenReadStream(10_000_000));
        files = await StaticResourceService.GetFileNamesAsync().ToListAsync();

        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            files = await StaticResourceService.GetFileNamesAsync().ToListAsync();

            loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
