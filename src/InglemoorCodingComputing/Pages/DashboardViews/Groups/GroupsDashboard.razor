@page "/dashboard/groups"
@layout DashboardLayout
@inject IGroupsService GroupsService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles="Admin")]
<AdminCheck/>

<PageTitle>Groups</PageTitle>

<div class="p-3">
    <a href="/dashboard/users" class="text-3xl font-semibold dark:text-indigo-300">Groups</a>

    <div class="flex flex-col p-3 my-3 space-y-2 border-2 border-indigo-500 w-fit rounded-xl">
        <label for="group" class="block font-semibold">Create Group</label>
        <input @bind=groupName class="px-3 py-2 bg-gray-100 rounded-xl text-slate-900 dark:text-gray-200 dark:bg-slate-700 focus:outline-none" id="group"/>
        <button @onclick=CreateAsync class="px-2 py-1 mx-1 text-white bg-indigo-500 rounded-xl hover:bg-indigo-600">Create</button>
        <div class="text-rose-500">
            @error
        </div>
    </div>

    <div class="flex flex-col space-y-3">
        @if (groups is null)
        {
            <p>Loading...</p>
        }
        else
        {
            <Virtualize Items="@groups" >
                <a href="/dashboard/groups/@context.Id" class="flex justify-between px-3 py-2 m-2 bg-gray-100 rounded-md hover:bg-gray-200 dark:bg-slate-900 dark:hover:bg-slate-800">
                    <div>
                        <span class="font-semibold">
                            Name:
                        </span>
                        @context.Name
                    </div>
                    
                    <div>
                        <span class="font-semibold">
                            Id:
                        </span>
                        <span class="font-mono">
                            @context.Id
                        </span>
                    </div>


                    <div>
                        <span class="font-semibold">
                            Created:
                        </span>
                        @context.Creation
                    </div>
                </a>
            </Virtualize>
        }
    </div>
</div>

@code {
    private string? error;
    private string? groupName;
    private List<Group>? groups;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            groups = await GroupsService.AllGroupsAsync().ToListAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task DeleteAsync(Group group)
    {
        error = null;
        var code = Random.Shared.Next(1000, 9000);
        if (await JSRuntime.InvokeAsync<string>("prompt", $"Enter {code} to confirm deletion of {group.Name}.") != code.ToString())
            return;
        if (!await GroupsService.TryDeleteGroup(group.Id))
            error = "Failed to delete group.";
        groups = null;
        await InvokeAsync(StateHasChanged);
        groups = await GroupsService.AllGroupsAsync().OrderBy(x => x.Creation).ToListAsync();
    }

    private async Task CreateAsync()
    {
        error = null;
        if (string.IsNullOrWhiteSpace(groupName))
        {
            error = "Group name cannot be empty.";
            await InvokeAsync(StateHasChanged);
            return;
        }

        if (groups?.Any(x => x.Name == groupName) is true)
        {
            error = "Group already exists";
            await InvokeAsync(StateHasChanged);
            return;
        }

        if (await GroupsService.TryCreateGroup(groupName) is null)
        {
            error = "Failed to create group";
            await InvokeAsync(StateHasChanged);
            return;
        }

        groups = null;
        groupName = string.Empty;
        await InvokeAsync(StateHasChanged);
        groups = await GroupsService.AllGroupsAsync().OrderBy(x => x.Creation).ToListAsync();
        await InvokeAsync(StateHasChanged);
    }
}
