@page "/page/{*pageRoute}"
@page "/pages/{*pageRoute}"
@inject IStaticPageService StaticPageService
@inject IJSRuntime JSRuntime

@if (notFound)
{
    <PageTitle>Not found</PageTitle>
    <NotFound/>
}
else if (contents is null)
{
    <PageTitle>Loading</PageTitle>
}
else
{
    <PageTitle>@title</PageTitle>
    <div class="flex justify-center">
        <div class="bg-transparent grow prose prose-h1:font-semibold lg:prose-lg prose-pre:font-code prose-pre:bg-transparent dark:prose-invert rounded-md px-2 py-1 m-1">
            @((MarkupString)contents)
        </div>
    </div>
}

@code {
    [Parameter]
    public string? PageRoute { get; set; }

    public string? oldRoute;

    private string? contents;

    private string? title;

    private bool notFound = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || PageRoute != oldRoute)
        {
            if (PageRoute is null || PageRoute.Length == 0 || PageRoute[0] == '_') 
            {
                notFound = true;
                await InvokeAsync(StateHasChanged);
                return;
            }
            var page = await StaticPageService.FindAsync(PageRoute);
            if (page is null || !page.Live)
            {
                notFound = true;
                await InvokeAsync(StateHasChanged);
                return;
            }
            contents = page.Rendered;
            title = page.Title;
            await InvokeAsync(StateHasChanged);
        }
        await JSRuntime.InvokeVoidAsync("highlightSnippet");
    }
}
