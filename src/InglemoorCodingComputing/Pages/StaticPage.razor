@inject IStaticPageService StaticPageService
@inject IJSRuntime JSRuntime

@if (notFound)
{
    <PageTitle>Not found</PageTitle>
    <NotFound/>
}
else if (content is null)
{
    <PageTitle>Loading</PageTitle>
}
else if (content.Authorized)
{
    <AuthorizeView Roles="@(content.AdminAuthorized ? "Admin" : null)">
        <Authorized>
            @if (content.AdminAuthorized)
            {
                <AdminCheck/>
            }
            <PageTitle>@content.Title</PageTitle>
            <div class="flex justify-center">
                <div class="styled-prose">
                    @((MarkupString)content.Rendered)
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <PageTitle>Not found</PageTitle>
            <NotFound/>
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <PageTitle>@content.Title</PageTitle>
    <div class="flex justify-center">
        <div class="styled-prose">
            @((MarkupString)content.Rendered)
        </div>
    </div>
}

@code {
    [Parameter]
    public string? PageRoute { get; set; }

    public string? oldRoute;

    private Models.StaticPage? content;

    private bool notFound;

    private async Task RenderContentAsync()
    {
        if (PageRoute is null || PageRoute.Length == 0 || PageRoute[0] == '_') 
        {
            notFound = true;
            return;
        }
        content = await StaticPageService.FindAsync(PageRoute);
        if (content is null || !content.Live)
        {
            notFound = true;
            return;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && PageRoute != oldRoute)
        {
            oldRoute = PageRoute;
            await RenderContentAsync();

            await InvokeAsync(StateHasChanged);
        }
        await JSRuntime.InvokeVoidAsync("highlightSnippet");
    }

    protected override Task OnInitializedAsync() =>
        RenderContentAsync();

}
