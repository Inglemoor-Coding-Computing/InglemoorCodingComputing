@inject IStaticPageService StaticPageService
@inject IJSRuntime JSRuntime
@inject Ganss.XSS.HtmlSanitizer HtmlSanitizer
@using System.Web
@using Markdig

<div @attributes=AdditionalAttributes>
    <div class="flex flex-col overflow-hidden bg-gray-100 rounded-xl dark:bg-zinc-700 grow">
        <div class="grid grid-cols-2 font-bold select-none text-slate-700 dark:text-slate-400">
            <div @onclick="() => previewing = false" aria-pressed="@(!previewing)" role="button" class="@($"py-2 text-center {(!previewing ? "bg-gray-100 dark:bg-zinc-700" : "bg-gray-200 dark:bg-zinc-900 hover:bg-gray-300 dark:hover:bg-zinc-800")}")">Edit</div>
            <div @onclick="() => previewing = true" aria-pressed="@previewing" role="button" class="@($"py-2 text-center {(previewing ? "bg-gray-100 dark:bg-zinc-700" : "bg-gray-200 dark:bg-zinc-900 hover:bg-gray-300 dark:hover:bg-zinc-800")}")">Preview</div>
        </div>
        <div class="relative flex grow">
            <div class="flex p-3 grow">
                @if (previewing)
                {
                    <div class="flex p-2 bg-white rounded-lg grow dark:bg-zinc-800">
                        <div class="styled-prose">
                            @((MarkupString)rendered)
                        </div>
                    </div>
                }
                else
                {

                    <textarea class="grow bg-gray-50 dark:bg-zinc-800 focus:outline-none overflow-auto resize-none rounded-md break-normal whitespace-pre px-2 py-1 min-h-[100px] font-code" aria-hidden="true" @bind=Raw @bind:event="oninput"/>
                    <div class="absolute bottom-0 left-0">
                        <div class="pl-6 pb-7">
                            <button @onclick=SwitchTypeAsync class="text-sm text-gray-500 transition hover:text-indigo-500 hover:font-semibold">@type</button>
                        </div>
                    </div>
                }
                @if (changed && !Context.AutoSave)
                {
                    <div class="absolute bottom-0 right-0 transition duration-100">
                        <button class="flex px-3 py-2 mb-5 mr-5 space-x-1 font-semibold text-white rounded-2xl bg-fuchsia-400/75" @onclick=Save>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                                <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd" />
                            </svg>
                            <span>
                                Save
                            </span>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private string raw = string.Empty;
    private string rendered = string.Empty;
    private StaticPageType type = StaticPageType.Markdown;
    private string Raw 
    {
        get => raw;
        set
        {
            raw = value;
            _ = KeyPressed();
        }
    }
    private bool previewing;

    private bool queued;
    private bool loading;
    private bool changed;

    private StaticPage? page;

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    private async Task SwitchTypeAsync()
    {
        type = type switch
        {
            StaticPageType.Markdown => StaticPageType.Html,
            StaticPageType.Html => StaticPageType.Text,
            StaticPageType.Text or _ => StaticPageType.Markdown
        };
        await KeyPressed();
    }


    private void Save()
    {
        if (page is null)
            return;
        changed = false;
        Context.Saved(page with
        {
            Raw = Raw,
            Rendered = rendered
        });
    }

    private async Task KeyPressed()
    {
        if (loading)
            queued = true;
        else
        {
            do
            {
                loading = true;
                queued = false;
                rendered = HtmlSanitizer.Sanitize(type switch
                {
                    StaticPageType.Markdown => Markdown.ToHtml(raw, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build()),
                    StaticPageType.Html => raw,
                    StaticPageType.Text or _ => $"<pre>{HttpUtility.HtmlEncode(raw)}</pre>",
                });
                if (Context.AutoSave)
                    Save();
                changed = true;
                await Task.Delay(200);
                loading = false;
            }
            while (queued);
            await InvokeAsync(StateHasChanged);
        }
    }

    [Parameter, EditorRequired]
    public IStaticContentEditContext Context { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("highlightSnippet");
        if (firstRender)
        {
            page = await Context.InitialPageAsync();
            rendered = page.Rendered;
            raw = page.Raw;
            await InvokeAsync(StateHasChanged);
        }
    }
}