@inject IThemeService ThemeService
@implements IDisposable

<div class="grid content-center">
    @if (ThemeService.Theme == Theme.System)
    {
        <button class="p-1 ml-2 rounded-lg bg-gray-100 dark:bg-gray-800 dark:hover:bg-indigo-600 text-sky-500 hover:bg-indigo-300 hover:text-gray-100" @onclick="() => ThemeService.Theme = Theme.Dark">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
        </button>
    }
    else if (ThemeService.Theme == Theme.Light)
    {
        <button class="p-1 ml-2 rounded-lg bg-gray-100 grid text-sky-500 hover:bg-indigo-300 hover:text-gray-100" @onclick="() => ThemeService.Theme = Theme.System">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
            </svg>
        </button>
    }
    else if (ThemeService.Theme == Theme.Dark)
    {
        <button class="p-1 ml-2 rounded-lg bg-gray-800 grid text-sky-500 hover:bg-indigo-600 hover:text-gray-100" @onclick="() => ThemeService.Theme = Theme.Light">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
            </svg>
        </button>
    }
</div>

@code {
    private async void ThemeChanged(object? _, Theme __) =>
        await InvokeAsync(StateHasChanged);

    protected override void OnInitialized() =>
        ThemeService.OnThemeChanged += ThemeChanged;

    public void Dispose() =>
        ThemeService.OnThemeChanged -= ThemeChanged;
}
