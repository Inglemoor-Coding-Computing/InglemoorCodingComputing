@inject IUserStateService UserStateService
@inject IUserService UserService
@implements IDisposable
<div class="px-3 sm:px-6 py-4 w-fit my-3 rounded-xl text-slate-900 dark:text-slate-200 bg-gray-100 dark:bg-gray-700 flex align-middle">
    <div>
        <div class="text-xl font-bold">@Meeting.Name</div>
        <div class="text-lg font-semibold">@Meeting.Date.ToString("D")</div>
        <div class="italic">@Meeting.StartTime.ToString("t") / @Meeting.EndTime.ToString("t")</div>
        <div>@Meeting.Details</div>
        @if (Attendance)
        {
            <AuthorizeView>
                <NotAuthorized>
                    <span class="underline text-gray-500">
                        Log in to take attendance
                    </span>
                </NotAuthorized>
                <Authorized>
                    @if (user is not null && Meeting.RegisteredAttendees.Contains(user.Id))
                    {
                        <span class="text-gray-500">Attendance taken!</span> 
                    }
                    else
                    {
                        <button @onclick=TakeAttendanceAsync class="bg-indigo-500 text-white active:bg-indigo-700 hover:bg-indigo-600 py-1 px-2 rounded-xl mt-3">Take Attendance Now!</button>
                    }
                </Authorized>
            </AuthorizeView>
        }
        @if (ShowAttendees)
        {
            <div class="flex">
                <button @onclick="() => attendeesOpen = !attendeesOpen" class="p-1 rounded-lg text-slate-900 dark:text-white hover:text-white hover:bg-indigo-500">
                    @if (attendeesOpen)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd" />
                        </svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                        </svg>
                    }
                </button>
                <h4 class="text-md">Attendance: @Meeting.RegisteredAttendees.Count</h4>
            </div>
            @if (attendeesOpen)
            {
                @if (attendees is null)
                {
                    _ = FindUsersAsync();

                    <p class="text-slate-800 dark:text-slate-200">loading</p>
                }
                else
                {
                    @foreach (var user in attendees)
                    {
                        <a href="/dashboard/users/@user.Id">@user.FirstName @user.LastName  -  @user.Email</a>
                    }
                }
            }
                
        }
    </div>
    @if (Editable)
    {
        <div class="pl-3">
            <button class="p-1 rounded-md text-rose-500 hover:text-white hover:bg-rose-500 grow-0" @onclick="() => OnDelete.InvokeAsync(Meeting)">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public Meeting Meeting { get; set; } = null!;

    [Parameter]
    public bool Editable { get; set; }

    [Parameter]
    public bool Attendance { get; set; }

    [Parameter]
    public bool ShowAttendees { get; set; }

    private bool attendeesOpen;

    private List<AppUser>? attendees = null;

    [Parameter]
    public EventCallback<Meeting> OnDelete { get; set; }

    [Parameter]
    public EventCallback<Guid> OnAttendance { get; set; }

    private AppUser? user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            user = await UserStateService.CurrentAsync();
            UserStateService.Updated += OnUserUpdated;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task TakeAttendanceAsync()
    {
        if (user is not null)
        {
            await OnAttendance.InvokeAsync(user.Id);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task FindUsersAsync()
    {
        attendees = new();
        foreach (var userId in Meeting.RegisteredAttendees)
        {
            if (await UserService.TryReadUserAsync(userId) is AppUser user)
                attendees.Add(user);
        }
        await InvokeAsync(StateHasChanged);
    }

    private void OnUserUpdated(object? _, AppUser? newUser) =>
        user = newUser;

    public void Dispose() =>
        UserStateService.Updated -= OnUserUpdated;
}
