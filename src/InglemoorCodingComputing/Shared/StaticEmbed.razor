@inject IStaticPageService StaticPageService
@inject IJSRuntime JSRuntime
@inject ILogger<StaticEmbed> Logger

@if (notFound)
{
    <h3 class="text-rose-500">Content not found</h3>
}
else if (contents is null)
{
    <h3>Loading</h3>
}
else
{
    <div class="flex justify-center">
        <div class="px-2 py-1 m-1 prose bg-transparent rounded-md grow prose-h1:font-semibold lg:prose-lg prose-pre:font-code prose-pre:bg-transparent dark:prose-invert">
            @((MarkupString)contents)
        </div>
    </div>
}

@code {
    [Parameter, EditorRequired]
    public string Tag { get; set; } = string.Empty;

    private string? contents;

    private bool notFound = false;

    protected override async Task OnInitializedAsync()
    {
        if (Tag is null) 
        {
            notFound = true;
            await InvokeAsync(StateHasChanged);
            return;
        }
        var page = await StaticPageService.FindAsync(Tag);
        if (page is null || !page.Live)
        {
            notFound = true;
            Logger.LogError($"Unable to find static content: '{Tag}'");
            await InvokeAsync(StateHasChanged);
            return;
        }
        contents = page.Rendered;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("highlightSnippet");
    }
}
