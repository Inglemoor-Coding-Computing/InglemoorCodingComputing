@inject UserLogoutManager UserLogoutManager
@inject NavigationManager NavigationManager
@inject IUserStateService UserStateService
@inject IJSRuntime JSRuntime
@implements IDisposable
@using System.Security.Claims

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;

    public async void OnLogout(Guid id, bool force)
    {
        var user = (await AuthState).User;
        if (user.Identity?.IsAuthenticated is true &&
            user.FindFirstValue(ClaimTypes.NameIdentifier) is string userId && 
            Guid.Parse(userId) == id)
        {
            if (!force && await JSRuntime.InvokeAsync<int>("post", new[] { "/api/auth/ping", "" }) is 200)
                return;

            await JSRuntime.InvokeAsync<int>("post", new[] { "/api/auth/logout", "" });
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UserLogoutManager.UserLoggedOut += OnLogout;
            await Task.Delay(5000);
            var user = (await AuthState).User;
            if (user.Identity?.IsAuthenticated is true && await UserStateService.CurrentAsync() is null)
            {
                await JSRuntime.InvokeAsync<int>("post", new[] { "/api/auth/logout", "" });
                NavigationManager.NavigateTo(NavigationManager.Uri, true);
            }    
        }
    }

    public void Dispose() =>
        UserLogoutManager.UserLoggedOut -= OnLogout;
}
